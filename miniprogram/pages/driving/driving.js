"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const centPerSec = 1;
function formatfee(feer) {
    return (feer / 100).toFixed(2);
}
function formatDurtion(Sec) {
    const h = Math.floor(Sec / 3600);
    Sec -= h * 3600;
    const m = Math.floor(Sec / 60);
    Sec -= m * 60;
    const s = Math.floor(Sec);
    return `${padstring(h)}:${padstring(m)}:${padstring(s)}`;
}
function padstring(n) {
    if (n < 10) {
        return '0' + n.toFixed(0);
    }
    else {
        return n.toFixed(0);
    }
}
Page({
    timer: undefined,
    tripID: '',
    data: {
        location: {
            latitude: 40.756825521115363,
            longitude: 121.67222114786053,
        },
        scale: 10,
        elapsed: '00:00:00',
        fee: '45.72',
    },
    onLoad(opt) {
        const o = opt;
        console.log("记录行程", o.trip_id);
        this.setupLocationUpdator();
        this.setupTimer();
    },
    onUnload() {
        wx.stopLocationUpdate();
        if (this.timer) {
            clearInterval(this.timer);
        }
    },
    onEndTripTap() {
        wx.showLoading({
            title: "加载中",
            mask: true,
        }),
            setTimeout(() => {
                wx.redirectTo({
                    url: "/pages/learncss/learncss",
                    complete: () => {
                        wx.hideLoading();
                    }
                });
            }, 3000);
    },
    setupLocationUpdator() {
        wx.startLocationUpdate({
            fail: console.error,
        });
        wx.onLocationChange(loc => {
            console.log("location:", loc);
            this.setData({
                location: {
                    latitude: loc.latitude,
                    longitude: loc.longitude,
                },
            });
        });
    },
    setupTimer() {
        let elapsedSec = 0;
        let cents = 0;
        this.timer = setInterval(() => {
            elapsedSec++;
            cents++;
            cents *= centPerSec;
            this.setData({
                elapsed: formatDurtion(elapsedSec),
                fee: formatfee(cents)
            });
        }, 1000);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRyaXZpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFFcEIsU0FBUyxTQUFTLENBQUMsSUFBWTtJQUMzQixPQUFPLENBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVoQyxDQUFDO0FBQ0QsU0FBUyxhQUFhLENBQUMsR0FBVTtJQUM3QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM5QixHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQTtJQUNmLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzVCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ2IsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN6QixPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUM1RCxDQUFDO0FBR0EsU0FBUyxTQUFTLENBQUMsQ0FBUztJQUN6QixJQUFHLENBQUMsR0FBRyxFQUFFLEVBQUM7UUFDTixPQUFPLEdBQUcsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQzFCO1NBQ0c7UUFDQSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDdEI7QUFDTCxDQUFDO0FBR0QsSUFBSSxDQUFDO0lBQ0QsS0FBSyxFQUFFLFNBQTZCO0lBQ3BDLE1BQU0sRUFBRSxFQUFFO0lBRVYsSUFBSSxFQUFFO1FBQ0YsUUFBUSxFQUFFO1lBQ04sUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUUsa0JBQWtCO1NBQ2hDO1FBQ0QsS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsVUFBVTtRQUNuQixHQUFHLEVBQUUsT0FBTztLQUNmO0lBRUQsTUFBTSxDQUFDLEdBQThCO1FBQ2pDLE1BQU0sQ0FBQyxHQUF1QixHQUFHLENBQUE7UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTlCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFBO1FBQzNCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNKLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO1FBQ3ZCLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBQztZQUNWLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDNUI7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLEVBQUUsQ0FBQyxXQUFXLENBQUM7WUFDWCxLQUFLLEVBQUUsS0FBSztZQUNaLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQztZQUNGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQztvQkFDVixHQUFHLEVBQUUsMEJBQTBCO29CQUMvQixRQUFRLEVBQUUsR0FBRyxFQUFFO3dCQUNYLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtvQkFDcEIsQ0FBQztpQkFDSixDQUFDLENBQUE7WUFDTixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsb0JBQW9CO1FBRWhCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztZQUNuQixJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDdEIsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQzdCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsUUFBUSxFQUFDO29CQUNMLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtvQkFDdEIsU0FBUyxFQUFDLEdBQUcsQ0FBQyxTQUFTO2lCQUMxQjthQUNKLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQzFCLFVBQVUsRUFBRyxDQUFBO1lBQ2IsS0FBSyxFQUFHLENBQUE7WUFDUixLQUFLLElBQUksVUFBVSxDQUFBO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsT0FBTyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUM7Z0JBQ2xDLEdBQUcsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDO2FBQ3hCLENBQUMsQ0FBQTtRQUNOLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNaLENBQUM7Q0FDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByb3V0aW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JvdXRpbmdcIlxuXG5jb25zdCBjZW50UGVyU2VjID0gMVxuXG5mdW5jdGlvbiBmb3JtYXRmZWUoZmVlcjogbnVtYmVyKTogc3RyaW5ne1xuICAgIHJldHVybiAoZmVlci8xMDApLnRvRml4ZWQoMilcblxufVxuZnVuY3Rpb24gZm9ybWF0RHVydGlvbihTZWM6bnVtYmVyKXtcbiAgICBjb25zdCBoID0gTWF0aC5mbG9vcihTZWMvMzYwMCkgICAvL+i9rOWMluWwj+aXtlxuICAgIFNlYyAtPSBoICogMzYwMFxuICAgIGNvbnN0IG0gPSBNYXRoLmZsb29yKFNlYy82MCkgICAgIC8v6L2s5YyW5YiG6ZKfXG4gICAgU2VjIC09IG0gKiA2MFxuICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKFNlYylcbiAgICByZXR1cm4gYCR7cGFkc3RyaW5nKGgpfToke3BhZHN0cmluZyhtKX06JHtwYWRzdHJpbmcocyl9YFxufVxuXG4vL+mcgOimgeWwhuaXtumXtOaYvuekuuS4pOS4qumbtu+8jOS+i+Wmgu+8mjAgPT4gMDBcbiBmdW5jdGlvbiBwYWRzdHJpbmcobjogbnVtYmVyKTogc3RyaW5ne1xuICAgIGlmKG4gPCAxMCl7XG4gICAgICAgIHJldHVybiAnMCcrbi50b0ZpeGVkKDApXG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIHJldHVybiBuLnRvRml4ZWQoMClcbiAgICB9XG59XG5cblxuUGFnZSh7XG4gICAgdGltZXI6IHVuZGVmaW5lZCBhcyBudW1iZXJ8dW5kZWZpbmVkLFxuICAgIHRyaXBJRDogJycsXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogNDAuNzU2ODI1NTIxMTE1MzYzLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAxMjEuNjcyMjIxMTQ3ODYwNTMsXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiAxMCxcbiAgICAgICAgZWxhcHNlZDogJzAwOjAwOjAwJyxcbiAgICAgICAgZmVlOiAnNDUuNzInLFxuICAgIH0sXG4gICAgLy/pobXpnaLotbflp4vvvIxvcHTkuLrkuIrkuKrpobXpnaLkvKDpgIHmlbDmja5cbiAgICBvbkxvYWQob3B0OiBSZWNvcmQ8J3RyaXBfaWQnLCBzdHJpbmc+KXsgIC8vUmVjb3JkPCd0cmlwX2lkJywgc3RyaW5nPuihqOekunJpcF9pZOS4unN0cmluZ+exu+Wei1xuICAgICAgICBjb25zdCBvOiByb3V0aW5nLkRyaXZpbmdPcHQgPSBvcHRcbiAgICAgICAgY29uc29sZS5sb2coXCLorrDlvZXooYznqItcIiwgby50cmlwX2lkKVxuXG4gICAgICAgIHRoaXMuc2V0dXBMb2NhdGlvblVwZGF0b3IoKVxuICAgICAgICB0aGlzLnNldHVwVGltZXIoKVxuICAgIH0sXG5cbiAgICBvblVubG9hZCgpe1xuICAgICAgICB3eC5zdG9wTG9jYXRpb25VcGRhdGUoKVxuICAgICAgICBpZih0aGlzLnRpbWVyKXtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVuZFRyaXBUYXAoKXtcbiAgICAgICAgd3guc2hvd0xvYWRpbmcoe1xuICAgICAgICAgICAgdGl0bGU6IFwi5Yqg6L295LitXCIsXG4gICAgICAgICAgICBtYXNrOiB0cnVlLCAgIC8v5L+d5oqk5oyJ6ZKuXG4gICAgICAgIH0pLFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHd4LnJlZGlyZWN0VG8oe1xuICAgICAgICAgICAgICAgIHVybDogXCIvcGFnZXMvbGVhcm5jc3MvbGVhcm5jc3NcIixcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT57XG4gICAgICAgICAgICAgICAgICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCAzMDAwKTsgICBcbiAgICB9LFxuXG4gICAgc2V0dXBMb2NhdGlvblVwZGF0b3IoKXtcbiAgICAgICAgLy/otbflp4vkvY3nva5cbiAgICAgICAgd3guc3RhcnRMb2NhdGlvblVwZGF0ZSh7XG4gICAgICAgICAgICBmYWlsOiBjb25zb2xlLmVycm9yLFxuICAgICAgICB9KVxuICAgICAgICAvL+WunuaXtuabtOaWsOS9jee9rlxuICAgICAgICB3eC5vbkxvY2F0aW9uQ2hhbmdlKGxvYyA9PntcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9jYXRpb246XCIsIGxvYylcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246e1xuICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6bG9jLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIC8v5a6a5pyf5ZCR5omn6KGM6K+l5Ye95pWwXG4gICAgc2V0dXBUaW1lcigpe1xuICAgICAgICBsZXQgZWxhcHNlZFNlYyA9IDBcbiAgICAgICAgbGV0IGNlbnRzID0gMFxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT57XG4gICAgICAgICAgICBlbGFwc2VkU2VjICsrXG4gICAgICAgICAgICBjZW50cyArK1xuICAgICAgICAgICAgY2VudHMgKj0gY2VudFBlclNlY1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBlbGFwc2VkOiBmb3JtYXREdXJ0aW9uKGVsYXBzZWRTZWMpLFxuICAgICAgICAgICAgICAgIGZlZTogZm9ybWF0ZmVlKGNlbnRzKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgMTAwMClcbiAgICB9XG59KVxuIl19